export declare class BaseFMC extends BaseAirliners {
    defaultInputErrorMessage: string;
    protected currentFlightPlanWaypointIndex: number;
    protected _title: any;
    protected _pageCurrent: any;
    protected _pageCount: any;
    protected _labels: any[];
    protected _lines: any[];
    protected _inOut: any;
    onLeftInput: any[];
    onRightInput: any[];
    lastPos: string;
    costIndex: number;
    protected lastUserInput: string;
    protected isDisplayingErrorMessage: boolean;
    protected maxCruiseFL: number;
    protected routeIndex: number;
    coRoute: string;
    protected routeIsSelected: boolean;
    protected routePageCurrent: number;
    protected routePageCount: number;
    protected tmpOrigin: string;
    tmpDestination: string;
    protected customV1Speed: boolean;
    protected customVRSpeed: boolean;
    protected customV2Speed: boolean;
    transitionAltitude: number;
    protected perfTOTemp: number;
    protected overSpeedLimitThreshold: boolean;
    protected _overridenFlapApproachSpeed: number;
    protected _overridenSlatApproachSpeed: number;
    protected taxiFuelWeight: number;
    protected _routeFinalFuelWeight: number;
    protected _routeFinalFuelTime: number;
    protected _routeReservedWeight: number;
    protected _routeReservedPercent: number;
    protected zeroFuelWeight: number;
    zeroFuelWeightMassCenter: number;
    protected takeOffTrim: number;
    protected _takeOffFlap: number;
    protected blockFuel: number;
    protected _fuelReserves: number;
    protected takeOffWeight: number;
    protected landingWeight: number;
    protected averageWind: number;
    protected perfCrzWindHeading: number;
    protected perfCrzWindSpeed: number;
    protected perfApprQNH: number;
    protected perfApprTemp: number;
    protected perfApprWindHeading: number;
    protected perfApprWindSpeed: number;
    protected perfApprTransAlt: number;
    protected vApp: number;
    protected perfApprMDA: number;
    protected perfApprDH: number;
    protected _flightPhases: string[];
    currentFlightPhase: number;
    protected _lockConnectIls: boolean;
    protected _apNavIndex: number;
    protected _apLocalizerOn: boolean;
    protected _canSwitchToNav: boolean;
    protected needApproachToSwitchToNav: boolean;
    protected _vhf1Frequency: number;
    protected _vhf2Frequency: number;
    protected _vor1FrequencyIdent: string;
    protected _vor1Frequency: number;
    protected _vor1Course: number;
    protected _vor2FrequencyIdent: string;
    protected _vor2Frequency: number;
    protected _vor2Course: number;
    protected _ilsFrequencyIdent: string;
    protected _ilsFrequency: number;
    protected _ilsCourse: number;
    protected _adf1Frequency: number;
    protected _adf2Frequency: number;
    protected _rcl1Frequency: number;
    protected _pre2Frequency: number;
    protected _atc1Frequency: number;
    protected _radioNavOn: boolean;
    protected _approachInitialized: boolean;
    protected _fuelVarsUpdatedGrossWeight: number;
    protected _fuelVarsUpdatedTripCons: number;
    protected _debug: number;
    protected _checkUpdateFuel: number;
    protected _checkFlightPlan: number;
    protected _smoothedTargetHeading: number;
    protected _smootherTargetPitch: number;
    protected _titleElement: any;
    static approachTypes: string[];
    static clrValue: string;
    static _AvailableKeys: string;
    protected _pageCurrentElement: HTMLElement | null;
    protected _pageCountElement: HTMLElement | null;
    protected _labelElements: HTMLElement[][];
    protected _lineElements: HTMLElement[][];
    protected _inOutElement: HTMLElement | null;
    protected _cruiseFlightLevel: number;
    dataManager: FMCDataManager;
    refAirport: WayPoint;
    refGate: string;
    refHeading: number;
    initCoordinates: string;
    protected cruiseTemperature: number;
    flightPlanManager: FlightPlanManager;
    protected altDestination: string;
    protected groundTemperature: number;
    v1Speed: number;
    vRSpeed: number;
    v2Speed: number;
    protected tempCurve: Curve;
    radioNav: RadioNav;
    protected flaps: number;
    protected ths: string;
    protected thrustReductionAltitude: number;
    protected accelerationAltitude: number;
    protected preSelectedDesSpeed: number;
    protected preSelectedCrzSpeed: number;
    protected preSelectedClbSpeed: number;
    protected takeOffSpeedsInfo: TakeOffSpeedsInfo;
    protected onClrLong: () => void;
    protected onClr: () => void;
    protected onDiv: () => void;
    protected onDel: () => void;
    protected onSp: () => void;
    protected onLetterInput: (l: string) => void;
    onPrevPage: () => void;
    onNextPage: () => void;
    protected onRad: () => void;
    protected onMenu: () => void;
    protected onProg: () => void;
    protected onFmcComm: () => void;
    protected onHold: () => void;
    protected onFix: () => void;
    protected onAtc: () => void;
    protected onDepArr: () => void;
    protected onInit: () => void;
    onInputAircraftSpecific: (input: string) => boolean;
    refreshPageCallback: () => void;
    pageUpdate: () => void;
    protected aircraftType: Aircraft;
    constructor();
    static approachTypeStringToIndex(approachType: any): number;
    protected getTitle(): string;
    protected setTitle(content: string): void;
    protected getPageCurrent(): number;
    protected setPageCurrent(value: number | string): void;
    getPageCount(): any;
    setPageCount(value: any): void;
    getLabel(row: any, col?: number): HTMLElement;
    setLabel(label: any, row: any, col?: number): void;
    getLine(row: any, col?: number): HTMLElement;
    setLine(content: any, row: any, col?: number): void;
    get inOut(): string;
    getInOut(): string;
    set inOut(v: string);
    setInOut(content: string): void;
    setTemplate(template: string[][]): void;
    getNavDataDateRange(): string;
    get cruiseFlightLevel(): number;
    set cruiseFlightLevel(fl: number);
    getCostIndexFactor(): number;
    clearUserInput(): void;
    showErrorMessage(message: string): void;
    tryUpdateRefAirport(airportIdent: string): Promise<boolean>;
    tryUpdateGate(gate: any): boolean;
    tryUpdateHeading(heading: string): boolean;
    tryUpdateIrsCoordinatesDisplay(newIrsCoordinatesDisplay: string): Promise<boolean>;
    setCruiseFlightLevelAndTemperature(input: string): boolean;
    trySetGroundTemperature(groundTemperature: string): boolean;
    tryUpdateCostIndex(costIndex: string, maxValue?: number): boolean;
    ensureCurrentFlightPlanIsTemporary(callback?: (arg0: boolean) => void): void;
    tryUpdateFromTo(fromTo: string, callback?: (arg0: boolean) => void): void;
    tryUpdateAltDestination(altDestIdent: string): Promise<boolean>;
    updateRouteOrigin(newRouteOrigin: string, callback?: (arg0: boolean) => void): void;
    updateRouteDestination(routeDestination: string, callback?: (arg0: boolean) => void): void;
    setOriginRunway(runwayName: string, callback?: (arg0: boolean) => void): void;
    setOriginRunwayIndex(runwayIndex: number, callback?: (arg0: boolean) => void): void;
    setRunwayIndex(runwayIndex: number, callback?: (arg0: boolean) => void): void;
    setDepartureIndex(departureIndex: number, callback?: (arg0: boolean) => void): void;
    removeDeparture(): boolean;
    setApproachTransitionIndex(transitionIndex: number, callback?: (arg0: boolean) => void): void;
    setArrivalProcIndex(arrivalIndex: number, callback?: (arg0: boolean) => void): void;
    setArrivalIndex(arrivalIndex: string, transitionIndex: any, callback?: (arg0: boolean) => void): void;
    removeArrival(): boolean;
    setApproachIndex(approachIndex: number, callback?: (arg0: boolean) => void): void;
    updateFlightNo(flightNo: string, callback?: (arg0: boolean) => void): void;
    updateCoRoute(coRoute: string, callback?: (arg0: boolean) => void): void;
    getTotalTripTime(): number;
    getTotalTripFuelCons(): number;
    getOrSelectWaypointByIdent(ident: string, callback: any): void;
    tryAddNextAirway(newAirway: string): Promise<boolean>;
    tryAddNextWaypoint(newWaypointTo: string): Promise<boolean>;
    activateDirectToWaypointIdent(waypointIdent: string, callback?: () => void): void;
    activateDirectToWaypoint(waypoint: WayPoint, callback?: () => void): void;
    insertWaypointNextTo(newWaypointTo: string, referenceWaypoint: string, callback?: (arg0: boolean) => void): void;
    insertWaypoint(newWaypointTo: string, index: number, callback?: (arg0: boolean) => void): void;
    insertWaypointsAlongAirway(lastWaypointIdent: string, index: number, airwayName: string, callback?: (arg0: boolean) => void): void;
    tryInsertAirwayByWaypointIdent(newWaypointIdent: string, from: string): Promise<boolean>;
    tryInsertAirway(newAirway: string, from: string): Promise<boolean>;
    removeWaypoint(index: number, callback?: () => void): void;
    tryUpdateWaypointVia(via: string, waypointIndex: number): Promise<boolean>;
    clearDepartureDiscontinuity(callback?: () => void): void;
    clearArrivalDiscontinuity(callback?: () => void): void;
    eraseTemporaryFlightPlan(callback?: () => void): void;
    insertTemporaryFlightPlan(callback?: () => void): void;
    _computeV1Speed(): void;
    _computeVRSpeed(): void;
    _computeV2Speed(): void;
    trySetV1Speed(s: string): boolean;
    trySetVRSpeed(s: string): boolean;
    trySetV2Speed(s: string): boolean;
    trySetTransAltitude(s: string): boolean;
    trySetThrustReductionAccelerationAltitude(s: string): boolean;
    trySetFlapsTHS(s: string): boolean;
    getFlapSpeed(): number;
    getFlapTakeOffSpeed(): number;
    getSlatTakeOffSpeed(): number;
    getCleanTakeOffSpeed(): number;
    updateCleanTakeOffSpeed(): void;
    setPerfTOFlexTemp(s: string): boolean;
    getClbManagedSpeed(): number;
    getCrzManagedSpeed(): number;
    getDesManagedSpeed(): number;
    getFlapApproachSpeed(useCurrentWeight?: boolean): number;
    setFlapApproachSpeed(s: string): boolean;
    getSlatApproachSpeed(useCurrentWeight?: boolean): number;
    setSlatApproachSpeed(s: string): boolean;
    getCleanApproachSpeed(): number;
    getManagedApproachSpeed(flapsHandleIndex?: number): number;
    updateCleanApproachSpeed(): void;
    trySetTaxiFuelWeight(s: string): Promise<boolean>;
    getRouteFinalFuelWeight(): number;
    getRouteFinalFuelTime(): number;
    trySetRouteFinalFuel(s: string): Promise<boolean>;
    getRouteReservedWeight(): number;
    getRouteReservedPercent(): number;
    trySetRouteReservedFuel(s: string): boolean;
    updateTakeOffTrim(): void;
    getTakeOffFlap(): number;
    setTakeOffFlap(s: string): boolean;
    getZeroFuelWeight(useLbs?: boolean): number;
    getApproachWeight(useLbs?: boolean): number;
    setZeroFuelWeight(s: number, callback?: (arg0: boolean) => void, useLbs?: boolean): void;
    setZeroFuelCG(s: string, callback?: (arg0: boolean) => void): void;
    trySetZeroFuelWeightZFWCG(s: string, useLbs?: boolean): Promise<boolean>;
    getBlockFuel(useLbs?: boolean): number;
    trySetBlockFuel(s: number, useLbs?: boolean): boolean;
    getFuelReserves(useLbs?: boolean): number;
    setFuelReserves(s: number, useLbs?: boolean): boolean;
    getWeight(useLbs?: boolean): number;
    getCurrentWeight(useLbs?: boolean): Promise<unknown>;
    setWeight(a: number | string, callback?: (arg0: boolean) => void, useLbs?: boolean): void;
    trySetTakeOffWeightLandingWeight(s: string): Promise<boolean>;
    trySetAverageWind(s: string): Promise<boolean>;
    setPerfCrzWind(s: string): boolean;
    trySetPreSelectedClimbSpeed(s: string): boolean;
    trySetPreSelectedCruiseSpeed(s: string): boolean;
    trySetPreSelectedDescentSpeed(s: string): boolean;
    setPerfApprQNH(s: string): boolean;
    setPerfApprTemp(s: string): boolean;
    setPerfApprWind(s: string): boolean;
    setPerfApprTransAlt(s: string): boolean;
    getVApp(): number;
    setPerfApprVApp(s: string): boolean;
    getVLS(): number;
    setPerfApprMDA(s: string): boolean;
    setPerfApprDH(s: string): boolean;
    getIsFlying(): boolean;
    tryGoInApproachPhase(): Promise<boolean>;
    checkUpdateFlightPhase(): void;
    onFlightPhaseChanged(): void;
    connectVorFrequency(_index: number, _freq: number): boolean;
    connectIlsFrequency(_freq: number): boolean;
    connectIls(): void;
    setIlsFrequency(s: string): boolean;
    initRadioNav(_boot: boolean): void;
    updateRadioNavState(): void;
    canSwitchToNav(): boolean;
    isRadioNavActive(): boolean;
    get vhf1Frequency(): number;
    get vhf2Frequency(): number;
    get vor1FrequencyIdent(): string;
    get vor1Frequency(): number;
    get vor1Course(): number;
    get vor2FrequencyIdent(): string;
    get vor2Frequency(): number;
    get vor2Course(): number;
    get ilsFrequencyIdent(): string;
    get ilsFrequency(): number;
    get ilsCourse(): number;
    get adf1Frequency(): number;
    get adf2Frequency(): number;
    get rcl1Frequency(): number;
    get pre2Frequency(): number;
    get atc1Frequency(): number;
    set vhf1Frequency(_frq: number);
    set vhf2Frequency(_frq: number);
    set vor1FrequencyIdent(_ident: string);
    set vor1Frequency(_frq: number);
    set vor1Course(_crs: number);
    set vor2FrequencyIdent(_ident: string);
    set vor2Frequency(_frq: number);
    set vor2Course(_crs: number);
    set ilsFrequencyIdent(_ident: string);
    set ilsFrequency(_frq: number);
    set ilsCourse(_crs: number);
    set adf1Frequency(_frq: number);
    set adf2Frequency(_frq: number);
    set rcl1Frequency(_frq: number);
    set pre2Frequency(_frq: number);
    set atc1Frequency(_frq: number);
    Init(): void;
    onApproachUpdated(): void;
    onFMCFlightPlanLoaded(): void;
    recalculateTHRRedAccTransAlt(): void;
    onPowerOn(): void;
    onShutDown(): void;
    getFuelVarsUpdatedGrossWeight(useLbs?: boolean): number;
    getFuelVarsUpdatedTripCons(useLbs?: boolean): number;
    updateFuelVars(): Promise<void>;
    updateVSpeeds(): void;
    clearVSpeeds(): void;
    onUpdate(_deltaTime: number): void;
    updateHUDAirspeedColors(): void;
    onEvent(_event: string): void;
    clearDisplay(): void;
    generateHTMLLayout(parent: any): void;
    static secondsTohhmm(seconds: number): string;
    static hhmmToSeconds(hhmm: string): number;
    setAPSelectedSpeed(_speed: number, _aircraft: number): void;
    setAPManagedSpeed(_speed: number, _aircraft: number): void;
    computeETA(distance: number, speed?: number, currentTime?: number): number;
    computeFuelLeft(distance: number, speed?: number, currentFuel?: number, currentFuelFlow?: number): number;
    setAPSpeedHoldMode(): void;
}
